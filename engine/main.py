# engine/main.py
import os
import sys
import time
from .config import load_config, save_config
from .state import GameState, save_game, load_game, list_saves
from .ui import clear_screen, type_text, prompt_choice, prompt_save, prompt_load, prompt_settings
from .actions import perform_actions, _normalize_target
from .conditions import check_conditions
from .story_loader import load_story

def run(start_scene="intro.start"):
    """–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –≤–∏–∑—É–∞–ª—å–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã."""
    story = load_story()
    gs = GameState(start_scene)

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ ===
    config = load_config()
    save_dir = config.get("save_dir", "saves")
    if any(os.path.exists(os.path.join(save_dir, f)) for f in list_saves()):
        ans = input("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ? (y/n): ").lower().strip()
        if ans == "y":
            if loaded := prompt_load():
                gs = loaded

    while True:
        scene = story.get(gs.current)
        if not scene:
            print(f"[–û—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞ {gs.current} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞]")
            return

        if not check_conditions(gs, scene.get("conditions")):
            print(f"[–£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è {gs.current}]")
            return

        clear_screen()
        print(f"--- {gs.current} ---\n")
        text = scene.get("text")
        if text:
            type_text(text + "\n")

        perform_actions(gs, scene.get("actions"))

        choices = [
            ch for ch in scene.get("choices", [])
            if check_conditions(gs, ch.get("conditions"))
        ]

        if not choices:
            print("\n(–ö–æ–Ω–µ—Ü —Å—Ü–µ–Ω—ã)")
            return

        user_input = prompt_choice(choices)

        # -------------------------------
        # üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º/–∑–∞–≥—Ä—É–∑–∫–æ–π/–≤—ã—Ö–æ–¥–æ–º
        # -------------------------------
        if user_input == "s":
            prompt_settings()  # –í—ã–∑–æ–≤ –∏–∑ ui.py
            input("Enter -> –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ")
            continue
        elif user_input == "v":
            prompt_save(gs)
            input("Enter -> –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ")
            continue
        elif user_input == "l":
            if loaded := prompt_load():
                gs = loaded
            input("Enter -> –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ")
            continue
        elif user_input == "q":
            ans = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º? (y/n): ").lower()
            if ans == "y":
                prompt_save(gs)
            return

        # -------------------------------
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω—ã
        # -------------------------------
        try:
            idx = int(user_input) - 1
            if not (0 <= idx < len(choices)):
                raise ValueError
        except ValueError:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å except Value
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
            time.sleep(0.5)
            continue

        selected = choices[idx]
        perform_actions(gs, selected.get("actions"))

        next_scene = selected.get("next") or selected.get("jump")
        if not next_scene:
            if gs.history[-1] == gs.current:
                print("\n(–ö–æ–Ω–µ—Ü –ø—É—Ç–∏ ‚Äî –Ω–µ—Ç next/jump)")
                return
        else:
            gs.current = _normalize_target(gs, next_scene)
        gs.history.append(gs.current)
